{"extracted_information": "提供的网页内容详细演示了如何在 Solana Web3.js 中使用 `getTokenAccountsByOwner` 方法来获取指定所有者的代币账户信息。此方法可用于查询普通代币账户，也可以作为获取 NFT（本质上是数量为 1 的特殊代币）账户的基础。内容提供了两种主要使用场景的代码示例：获取所有代币账户和获取特定铸币（mint）的代币账户。\n\n**核心代码示例：**\ntypescript\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as SPLToken from \"@solana/spl-token\";\n\n// 获取代币账户，通过所有者\nconst connection = new Connection(\"https://api.devnet.solana.com\");\n\nasync function main() {\n  // 1. 获取所有者（例如 '27kVX7JpPZ1bsrSckbR76mV6GeRqtrjoddubfg2zBpHZ'）的所有代币账户\n  let response = await connection.getTokenAccountsByOwner(\n    new PublicKey(\"27kVX7JpPZ1bsrSckbR76mV6GeRqtrjoddubfg2zBpHZ\"), // 所有者地址\n    {\n      programId: TOKEN_PROGRAM_ID,\n    }\n  );\n\n  response.value.forEach((e) => {\n    console.log(`pubkey: ${e.pubkey.toBase58()}`);\n    const accountInfo = SPLToken.AccountLayout.decode(e.account.data);\n    console.log(`mint: ${new PublicKey(accountInfo.mint)}`);\n    console.log(`amount: ${SPLToken.u64.fromBuffer(accountInfo.amount)}`);\n  });\n\n  console.log(\"-------------------\");\n\n  // 2. 获取所有者（例如 '27kVX7JpPZ1bsrSckbR76mV6GeRqtrjoddubfg2zBpHZ'）的特定铸币（mint）代币账户\n  let response2 = await connection.getTokenAccountsByOwner(\n    new PublicKey(\"27kVX7JpPZ1bsrSckbR76mV6GeRqtrjoddubfg2zBpHZ\"), // 所有者地址\n    {\n      mint: new PublicKey(\"E4ZN2KmnVmpwLwjJNAwRjuQLeE5iFHLcAJ8LGB7FMaGQ\"),\n    }\n  );\n\n  response2.value.forEach((e) => {\n    console.log(`pubkey: ${e.pubkey.toBase58()}`);\n    const accountInfo = SPLToken.AccountLayout.decode(e.account.data);\n    console.log(`mint: ${new PublicKey(accountInfo.mint)}`);\n    console.log(`amount: ${SPLToken.u64.fromBuffer(accountInfo.amount)}`);\n  });\n}\n\nmain().then(\n  () => process.exit(),\n  (err) => {\n    console.error(err);\n    process.exit(-1);\n  }\n);\n\n\n**代码解析与最佳实践：**\n\n1.  **引入必要的库**：\n    *   `@solana/spl-token`：用于处理 SPL 代币程序相关的常量（如 `TOKEN_PROGRAM_ID`）和账户布局解码（`SPLToken.AccountLayout.decode`）。\n    *   `@solana/web3.js`：Solana 区块链交互的核心库，包含 `Connection` 和 `PublicKey` 类。\n\n2.  **建立连接**：\n    *   `const connection = new Connection(\"https://api.devnet.solana.com\");`：连接到 Solana 开发网（Devnet）。在实际应用中，可以根据需要连接到主网（Mainnet-beta）或其他集群。\n\n3.  **`getTokenAccountsByOwner` 方法**：\n    *   此方法接受两个主要参数：所有者 `PublicKey` 和一个配置对象。\n    *   **查询所有代币账户**：通过在配置对象中指定 `programId: TOKEN_PROGRAM_ID` 来过滤结果，只返回属于 SPL Token Program 的账户。这是获取某个地址下所有代币账户（包括 NFT）的通用方法。\n    *   **查询特定铸币的代币账户**：通过在配置对象中指定 `mint: new PublicKey(\"MINT_ADDRESS\")` 来过滤，只返回与指定铸币地址关联的代币账户。这对于查找特定类型的代币或 NFT 非常有用。\n\n4.  **数据解码**：\n    *   `response.value` 包含一个 `ParsedAccountInfo` 数组，每个元素代表一个代币账户。\n    *   `e.account.data`：这是原始的账户数据。需要使用 `SPLToken.AccountLayout.decode(e.account.data)` 来解析出账户的详细信息。\n    *   `accountInfo.mint`：解析后得到的代币铸币地址。\n    *   `accountInfo.amount`：解析后得到的代币数量。对于 NFT，这个数量通常是 1。`SPLToken.u64.fromBuffer()` 用于将 `u64` 格式的金额转换为可读的数字。\n\n**关于 NFT 的说明**：\n在 Solana 上，NFT 本质上是满足特定条件的代币（通常是供应量为 1 且不可铸造的）。因此，使用 `getTokenAccountsByOwner` 来获取所有者地址下的代币账户，然后检查其铸币地址、供应量和元数据（通常需要与 Metaplex 程序交互来获取），即可识别出 NFT。上述代码是获取所有代币账户的基础，识别 NFT 则需要在获取到账户信息后，进一步检查 `mint` 的详细属性。", "specifications": {}, "pricing": {}, "features": [], "statistics": {}, "temporal_info": {"last_updated": "2022-09-23T18:56:02Z"}, "geographical_data": {}, "references": []}