{"extracted_information": "该内容提供了在React应用中集成Solana Wallet Adapter的快速设置指南，包括安装依赖、配置钱包提供者以及使用钱包功能进行交易的示例。", "specifications": {}, "pricing": {}, "features": [{"name": "Wallet Adapter for Solana Apps", "description": "为Solana应用提供钱包适配器功能。"}, {"name": "Quick Setup (using React)", "description": "提供基于React的快速设置指南。"}, {"name": "支持的钱包标准", "description": "自动支持实现Solana Mobile Stack Mobile Wallet Adapter Protocol和Solana Wallet Standard的钱包。对于不支持这些标准的钱包，可以通过实例化其传统钱包适配器来支持，这些适配器通常在`@solana/wallet-adapter-wallets`包中找到。"}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [], "configuration_and_usage": {"installation": {"command": "npm install --save @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui @solana/wallet-adapter-wallets @solana/web3.js react"}, "setup": {"description": "在React应用中设置钱包提供者，包裹整个应用或需要钱包功能的部分。", "code_example": "import React, { FC, useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\nexport const Wallet: FC = () => {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(\n    () => [\n      /**\n       * Wallets that implement either of these standards will be available automatically.\n       *\n       *   - Solana Mobile Stack Mobile Wallet Adapter Protocol\n       *     (https://github.com/solana-mobile/mobile-wallet-adapter)\n       *   - Solana Wallet Standard\n       *     (https://github.com/anza-xyz/wallet-standard)\n       *\n       * If you wish to support a wallet that supports neither of those standards,\n       * instantiate its legacy wallet adapter here. Common legacy adapters can be found\n       * in the npm package `@solana/wallet-adapter-wallets`.\n       */\n      new UnsafeBurnerWalletAdapter(),\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [network]\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <WalletMultiButton />\n          <WalletDisconnectButton />\n          {/* Your app's components go here, nested within the context providers. */}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};"}, "usage": {"description": "在组件中使用`useConnection`和`useWallet`钩子来获取连接状态、钱包公钥和发送交易的功能。", "code_example": "import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction } from '@solana/web3.js';\nimport React, { FC, useCallback } from 'react';\n\nexport const SendSOLToRandomAddress: FC = () => {\n  const { connection } = useConnection();\n  const { publicKey, sendTransaction } = useWallet();\n\n  const onClick = useCallback(async () => {\n    if (!publicKey) throw new WalletNotConnectedError();\n\n    // 890880 lamports as of 2022-09-01\n    const lamports = await connection.getMinimumBalanceForRentExemption(0);\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: Keypair.generate().publicKey,\n        lamports,\n      })\n    );\n\n    const { context: { slot: minContextSlot }, value: { blockhash, lastValidBlockHeight }} = await connection.getLatestBlockhashAndContext();\n    const signature = await sendTransaction(transaction, connection, { minContextSlot });\n\n    await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n  }, [publicKey, sendTransaction, connection]);\n\n  return (\n    <button onClick={onClick} disabled={!publicKey}>\n      Send SOL to a random address!\n    </button>\n  );\n};"}}}